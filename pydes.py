# 初始置换IP
IP = [58, 50, 42, 34, 26, 18, 10, 2,
      60, 52, 44, 36, 28, 20, 12, 4,
      62, 54, 46, 38, 30, 22, 14, 6,
      64, 56, 48, 40, 32, 24, 16, 8,
      57, 49, 41, 33, 25, 17, 9, 1,
      59, 51, 43, 35, 27, 19, 11, 3,
      61, 53, 45, 37, 29, 21, 13, 5,
      63, 55, 47, 39, 31, 23, 15, 7]
# 逆初始置换IP^{-1}
IP_1 = [40, 8, 48, 16, 56, 24, 64, 32,
        39, 7, 47, 15, 55, 23, 63, 31,
        38, 6, 46, 14, 54, 22, 62, 30,
        37, 5, 45, 13, 53, 21, 61, 29,
        36, 4, 44, 12, 52, 20, 60, 28,
        35, 3, 43, 11, 51, 19, 59, 27,
        34, 2, 42, 10, 50, 18, 58, 26,
        33, 1, 41, 9, 49, 17, 57, 25]
# 置换运算P
P = [16, 7, 20, 21, 29, 12, 28, 17,
     1, 15, 23, 26, 5, 18, 31, 10,
     2, 8, 24, 14, 32, 27, 3, 9,
     19, 13, 30, 6, 22, 11, 4, 25]
# 选择扩展运算E
E = [32, 1, 2, 3, 4, 5,
     4, 5, 6, 7, 8, 9,
     8, 9, 10, 11, 12, 13,
     12, 13, 14, 15, 16, 17,
     16, 17, 18, 19, 20, 21,
     20, 21, 22, 23, 24, 25,
     24, 25, 26, 27, 28, 29,
     28, 29, 30, 31, 32, 1]
# DES的S盒定义
S_BOX = [[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7,
          0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8,
          4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0,
          15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13],
         [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10,
          3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5,
          0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15,
          13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9],
         [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8,
          13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1,
          13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7,
          1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12],
         [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15,
          13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9,
          10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4,
          3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14],
         [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9,
          14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6,
          4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14,
          11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3],
         [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11,
          10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8,
          9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6,
          4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13],
         [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1,
          13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6,
          1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2,
          6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12],
         [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7,
          1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2,
          7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8,
          2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]]
# 置换选择1
PC_1 = [57, 49, 41, 33, 25, 17, 9,
        1, 58, 50, 42, 34, 26, 18,
        10, 2, 59, 51, 43, 35, 27,
        19, 11, 3, 60, 52, 44, 36,
        63, 55, 47, 39, 31, 23, 15,
        7, 62, 54, 46, 38, 30, 22,
        14, 6, 61, 53, 45, 37, 29,
        21, 13, 5, 28, 20, 12, 4]
# 置换选择2
PC_2 = [14, 17, 11, 24, 1, 5,
        3, 28, 15, 6, 21, 10,
        23, 19, 12, 4, 26, 8,
        16, 7, 27, 20, 13, 2,
        41, 52, 31, 37, 47, 55,
        30, 40, 51, 45, 33, 48,
        44, 49, 39, 56, 34, 53,
        46, 42, 50, 36, 29, 32]
# 左循环移位位数
SHIFT = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]


# 求4位比特值
def bin_value(val):
    bin_val = []
    for i in range(0, 4):
        bin_val.insert(0, str(val % 2))
        val = val // 2
    return bin_val


# 十六进制串转比特串
def hex_to_bin(text):
    array = []
    for i in range(len(text)):
        array.extend(bin_value(int(text[i], 16)))
    return array


# 比特串转十六进制串
def bin_to_hex(text):
    tmp = []
    for i in range(len(text) // 4):
        dec = int(text[4 * i]) * 8 + int(text[4 * i + 1]) * 4 + int(text[4 * i + 2]) * 2 + int(text[4 * i + 3])
        x = hex(dec)[2:].upper()
        tmp.extend(x)
    res = ''.join(tmp)
    return res


# 异或运算
def xor(bit1, bit2):
    res = [0] * len(bit1)
    for i in range(len(bit1)):
        res[i] = str(int(bit1[i]) ^ int(bit2[i]))
    return res


# 初始置换IP
def initial_permute(text):
    res = [0] * 64
    for i in range(64):
        res[i] = text[IP[i] - 1]
    return res


#  逆初始置换IP^{-1}
def initial_permute_1(text):
    res = [0] * 64
    for i in range(64):
        res[i] = text[IP_1[i] - 1]
    return res


# 选择扩展运算E 32位->48位
def expand(text):
    res = [0] * 48
    for i in range(48):
        res[i] = text[E[i] - 1]
    return res


# 置换运算P
def permute(text):
    res = [0] * 32
    for i in range(32):
        res[i] = text[P[i] - 1]
    return res


# S盒
def substitute(text):
    res = [0] * 32
    for i in range(8):
        row = int(text[i * 6]) * 2 + int(text[i * 6 + 5])
        col = int(text[i * 6 + 1]) * 8 + int(text[i * 6 + 2]) * 4 + int(text[i * 6 + 3]) * 2 + int(text[i * 6 + 4])
        tmp = S_BOX[i][row * 16 + col]
        for j in range(4):
            res[i * 4 + j] = bin_value(tmp)[j]
    return res


# 生成轮密钥
def generate_keys(key):
    res = []
    tmp_1 = [0] * 56
    # 置换选择1 64位->56位
    for i in range(len(PC_1)):
        tmp_1[i] = key[PC_1[i] - 1]
    # 生成16个密钥
    for i in range(16):
        tmp_2 = [0] * 48
        # 分成两组
        C = tmp_1[0:28]
        D = tmp_1[28:56]
        # 循环左移
        C = C[SHIFT[i]:] + C[:SHIFT[i]]
        D = D[SHIFT[i]:] + D[:SHIFT[i]]
        # 左右连接
        tmp_1 = C + D
        # 置换选择2 56位->48位
        for j in range(len(PC_2)):
            tmp_2[j] = tmp_1[PC_2[j] - 1]
        # 生成密钥
        res.append(tmp_2)
    # 返回的是一个列表包含了每轮的密钥
    return res


# 加密
def encrypt(text, key):
    keys = generate_keys(key)
    text_0 = initial_permute(text)
    L = text_0[0:32]
    R = text_0[32:64]
    for i in range(16):
        tmp = R
        tmp = expand(tmp)
        tmp = xor(tmp, keys[i])
        tmp = substitute(tmp)
        tmp = permute(tmp)
        tmp = xor(tmp, L)
        L = R
        R = tmp
    L, R = R, L
    res = L
    res.extend(R)
    res = initial_permute_1(res)
    return bin_to_hex(res)


if __name__ == '__main__':
    plain_text = hex_to_bin(input('16位十六进制明文:\n>'))
    key = hex_to_bin(input('16位十六进制密钥:\n>'))
    cipher_text = encrypt(plain_text, key)
    print('密文: ' + cipher_text)
